{
  "stats": {
    "suites": 5,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2018-02-05T09:05:04.715Z",
    "end": "2018-02-05T09:05:26.378Z",
    "duration": 21663,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "59f653e9-248f-4684-a699-a93ee3422527",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "c11e4fdb-3574-432d-8955-50d544a09567",
        "title": "Topcoder Message Service",
        "fullFile": "/media/sharathkumaranbu/Education/TopCoder/tc-backend-testsuite/tests/tc-message-service.js",
        "file": "/tests/tc-message-service.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cf472047-3c14-4e81-bfca-73e2e211d78f",
            "title": "GET /topics",
            "fullFile": "/media/sharathkumaranbu/Education/TopCoder/tc-backend-testsuite/tests/tc-message-service.js",
            "file": "/tests/tc-message-service.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Get topics should fail when there is no Authorization",
                "fullTitle": "Topcoder Message Service GET /topics Get topics should fail when there is no Authorization",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get('/v4/topics')\n  .end((err, res) => {\n    res.should.have.status(403);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.success.should.be.eql(false);\n    res.body.result.status.should.be.eql(403);\n    res.body.result.content.message.should.be.eql('No token provided.');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "69034a9b-82ee-4fa6-93c1-897764f0ceb8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get topics should fail when filter parameter is not present",
                "fullTitle": "Topcoder Message Service GET /topics Get topics should fail when filter parameter is not present",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get('/v4/topics')\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .set('Content-Type', 'application/json')\n  .end((err, res) => {\n    res.should.have.status(400);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.success.should.be.eql(false);\n    res.body.result.status.should.be.eql(400);\n    res.body.result.content.message.should.be.eql('Validation error: \"filter\" is required');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7e5dbcf2-f68c-442d-93ef-91dd2a310275",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get topics should fail when filter parameter is not present",
                "fullTitle": "Topcoder Message Service GET /topics Get topics should fail when filter parameter is not present",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get('/v4/topics')\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .set('Content-Type', 'application/json')\n  .end((err, res) => {\n    res.should.have.status(400);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.success.should.be.eql(false);\n    res.body.result.status.should.be.eql(400);\n    res.body.result.content.message.should.be.eql('Validation error: \"filter\" is required');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "afe49d6d-448b-41da-940b-5a22efc26093",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get topics should fail when filter parameter is empty",
                "fullTitle": "Topcoder Message Service GET /topics Get topics should fail when filter parameter is empty",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get('/v4/topics?filter')\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .set('Content-Type', 'application/json')\n  .end((err, res) => {\n    res.should.have.status(400);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.success.should.be.eql(false);\n    res.body.result.status.should.be.eql(400);\n    res.body.result.content.message.should.be.eql('Validation error: \"filter\" is not allowed to be empty');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e1dd093b-9fb0-44a2-bdba-8696fdc9b698",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get topics should fail when reference is not present in filter",
                "fullTitle": "Topcoder Message Service GET /topics Get topics should fail when reference is not present in filter",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get('/v4/topics?filter=\"\"')\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .set('Content-Type', 'application/json')\n  .end((err, res) => {\n    res.should.have.status(400);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.success.should.be.eql(false);\n    res.body.result.status.should.be.eql(400);\n    res.body.result.content.message.should.be.eql('Please provide reference and referenceId filter parameters');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "5188a371-5526-41e4-a245-afb7170b3545",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get topics should fail when referenceId is not present in filter",
                "fullTitle": "Topcoder Message Service GET /topics Get topics should fail when referenceId is not present in filter",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get('/v4/topics?filter=reference%3Dsubmission')\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .set('Content-Type', 'application/json')\n  .end((err, res) => {\n    res.should.have.status(400);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.success.should.be.eql(false);\n    res.body.result.status.should.be.eql(400);\n    res.body.result.content.message.should.be.eql('Please provide reference and referenceId filter parameters');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ebae1166-2356-402c-92ee-a1155b504009",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get topics count should be 0 if there are no topics for given reference ID",
                "fullTitle": "Topcoder Message Service GET /topics Get topics count should be 0 if there are no topics for given reference ID",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get('/v4/topics?filter=reference%3Dsubmission%26referenceId%3D25')\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .set('Content-Type', 'application/json')\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.should.have.all.keys('success', 'status', 'content', 'metadata');\n    res.body.result.success.should.be.eql(true);\n    res.body.result.status.should.be.eql(200);\n    res.body.result.content.should.be.empty; // eslint-disable-line no-unused-expressions\n    res.body.result.metadata.totalCount.should.be.eql(0);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "663b9324-8565-44b4-84d3-48d2e6d0627e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get topics should return valid data for existing topics",
                "fullTitle": "Topcoder Message Service GET /topics Get topics should return valid data for existing topics",
                "timedOut": false,
                "duration": 17534,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get('/v4/topics?filter=reference%3Dsubmission%26referenceId%3D455')\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .set('Content-Type', 'application/json')\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.should.have.all.keys('success', 'status', 'content', 'metadata');\n    res.body.result.success.should.be.eql(true);\n    res.body.result.status.should.be.eql(200);\n    res.body.result.content.should.be.a('array');\n    res.body.result.content[0].should.have.all.keys('id', 'dbId', 'reference', 'referenceId', 'date', 'lastActivityAt', 'title', 'read', 'userId', 'tag', 'totalPosts', 'retrievedPosts', 'postIds', 'posts');\n    res.body.result.metadata.totalCount.should.be.gt(0);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "317cc278-9bd7-459e-93da-785e6fa1269b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "69034a9b-82ee-4fa6-93c1-897764f0ceb8",
              "7e5dbcf2-f68c-442d-93ef-91dd2a310275",
              "afe49d6d-448b-41da-940b-5a22efc26093",
              "e1dd093b-9fb0-44a2-bdba-8696fdc9b698",
              "5188a371-5526-41e4-a245-afb7170b3545",
              "ebae1166-2356-402c-92ee-a1155b504009",
              "663b9324-8565-44b4-84d3-48d2e6d0627e",
              "317cc278-9bd7-459e-93da-785e6fa1269b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 17696,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6fa64780-c387-48b2-8120-a33f4688e220",
            "title": "GET /topics/:id",
            "fullFile": "/media/sharathkumaranbu/Education/TopCoder/tc-backend-testsuite/tests/tc-message-service.js",
            "file": "/tests/tc-message-service.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Get topic should fail when there is no Authorization",
                "fullTitle": "Topcoder Message Service GET /topics/:id Get topic should fail when there is no Authorization",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get('/v4/topics/1')\n  .end((err, res) => {\n    res.should.have.status(403);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.success.should.be.eql(false);\n    res.body.result.status.should.be.eql(403);\n    res.body.result.content.message.should.be.eql('No token provided.');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7d795936-08b8-4075-a05d-d6707ea6a691",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get topic should fail for non existent topics",
                "fullTitle": "Topcoder Message Service GET /topics/:id Get topic should fail for non existent topics",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get('/v4/topics/12345')\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .end((err, res) => {\n    res.should.have.status(404);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.success.should.be.eql(false);\n    res.body.result.status.should.be.eql(404);\n    res.body.result.content.message.should.be.eql('Topic does not exist');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "be878c90-e9e6-4de2-aa65-a9134b418460",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get topic should succeed for valid topic",
                "fullTitle": "Topcoder Message Service GET /topics/:id Get topic should succeed for valid topic",
                "timedOut": false,
                "duration": 1839,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get(`/v4/topics/${topicId}`)\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.should.have.all.keys('success', 'status', 'content', 'metadata');\n    res.body.result.success.should.be.eql(true);\n    res.body.result.status.should.be.eql(200);\n    res.body.result.content.should.have.all.keys('id', 'dbId', 'reference', 'referenceId', 'date', 'lastActivityAt', 'title', 'read', 'userId', 'tag', 'totalPosts', 'retrievedPosts', 'postIds', 'posts');\n    res.body.result.content.id.should.not.be.eql(null);\n    res.body.result.content.reference.should.be.eql('submission');\n    res.body.result.content.referenceId.should.be.eql('455');\n    res.body.result.content.date.should.not.be.eql(null);\n    res.body.result.content.postIds.should.be.a('array');\n    res.body.result.content.posts.should.be.a('array');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c4440696-8c09-4900-820c-e471ae2a5128",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7d795936-08b8-4075-a05d-d6707ea6a691",
              "be878c90-e9e6-4de2-aa65-a9134b418460",
              "c4440696-8c09-4900-820c-e471ae2a5128"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1872,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "28da97c4-e7d5-4330-92f1-bfe8f47bf60f",
            "title": "GET /topics/:topicId/posts",
            "fullFile": "/media/sharathkumaranbu/Education/TopCoder/tc-backend-testsuite/tests/tc-message-service.js",
            "file": "/tests/tc-message-service.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Get posts should fail when there is no Authorization",
                "fullTitle": "Topcoder Message Service GET /topics/:topicId/posts Get posts should fail when there is no Authorization",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get(`/v4/topics/${topicId}/posts`)\n  .end((err, res) => {\n    res.should.have.status(403);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.success.should.be.eql(false);\n    res.body.result.status.should.be.eql(403);\n    res.body.result.content.message.should.be.eql('No token provided.');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6ac5b012-7f1d-4723-b0ab-4fc1e5681f23",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get posts should fail when postIds parameter is not present",
                "fullTitle": "Topcoder Message Service GET /topics/:topicId/posts Get posts should fail when postIds parameter is not present",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get(`/v4/topics/${topicId}/posts`)\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .set('Content-Type', 'application/json')\n  .end((err, res) => {\n    res.should.have.status(400);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "10f2c1bd-c16b-4d61-855d-a079e50476a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get posts should fail for non existent topics",
                "fullTitle": "Topcoder Message Service GET /topics/:topicId/posts Get posts should fail for non existent topics",
                "timedOut": false,
                "duration": 246,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get('/v4/topics/12345/posts?postIds=1234')\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .set('Content-Type', 'application/json')\n  .end((err, res) => {\n    res.should.have.status(404);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.success.should.be.eql(false);\n    res.body.result.status.should.be.eql(404);\n    res.body.result.content.message.should.be.eql('Error fetching post');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "2949c291-fc50-47d2-a0bc-f02ed65b6900",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get posts count should be 0 for non existent posts",
                "fullTitle": "Topcoder Message Service GET /topics/:topicId/posts Get posts count should be 0 for non existent posts",
                "timedOut": false,
                "duration": 476,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get(`/v4/topics/${topicId}/posts?postIds=1234`)\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .set('Content-Type', 'application/json')\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.success.should.be.eql(true);\n    res.body.result.status.should.be.eql(200);\n    res.body.result.content.should.be.empty; // eslint-disable-line no-unused-expressions\n    res.body.result.metadata.totalCount.should.be.eql(0);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a609b5bd-b756-459e-ae55-96e8e8d99512",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get posts count should be greater than 0 for valid posts",
                "fullTitle": "Topcoder Message Service GET /topics/:topicId/posts Get posts count should be greater than 0 for valid posts",
                "timedOut": false,
                "duration": 404,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get(`/v4/topics/${topicId}/posts?postIds=${updPostId}`)\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .set('Content-Type', 'application/json')\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.should.have.all.keys('success', 'status', 'content', 'metadata');\n    res.body.result.success.should.be.eql(true);\n    res.body.result.status.should.be.eql(200);\n    res.body.result.content.should.be.a('array');\n    res.body.result.content[0].should.have.all.keys('id', 'date', 'updatedDate', 'userId', 'read', 'body', 'rawContent', 'type');\n    res.body.result.metadata.totalCount.should.be.eql(1);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ac40492f-5e49-4411-b2ef-1e36895cea48",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6ac5b012-7f1d-4723-b0ab-4fc1e5681f23",
              "10f2c1bd-c16b-4d61-855d-a079e50476a0",
              "2949c291-fc50-47d2-a0bc-f02ed65b6900",
              "a609b5bd-b756-459e-ae55-96e8e8d99512",
              "ac40492f-5e49-4411-b2ef-1e36895cea48"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1144,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "4aac95d7-9f03-4796-b6f5-47a914e5985c",
            "title": "GET /topics/:topicId/posts/:postId",
            "fullFile": "/media/sharathkumaranbu/Education/TopCoder/tc-backend-testsuite/tests/tc-message-service.js",
            "file": "/tests/tc-message-service.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Get post should fail when there is no Authorization",
                "fullTitle": "Topcoder Message Service GET /topics/:topicId/posts/:postId Get post should fail when there is no Authorization",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get(`/v4/topics/${topicId}/posts/${updPostId}`)\n  .end((err, res) => {\n    res.should.have.status(403);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.success.should.be.eql(false);\n    res.body.result.status.should.be.eql(403);\n    res.body.result.content.message.should.be.eql('No token provided.');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f72fd877-10ef-419d-bceb-646688479c5a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get posts should fail for non existent topics",
                "fullTitle": "Topcoder Message Service GET /topics/:topicId/posts/:postId Get posts should fail for non existent topics",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get('/v4/topics/12345/posts/1234')\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .set('Content-Type', 'application/json')\n  .end((err, res) => {\n    res.should.have.status(404);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.success.should.be.eql(false);\n    res.body.result.status.should.be.eql(404);\n    res.body.result.content.message.should.be.eql('Error fetching post');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "2bc523fc-dc39-4cc4-83c0-ba8847cbf59e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get posts should fail for non existent posts",
                "fullTitle": "Topcoder Message Service GET /topics/:topicId/posts/:postId Get posts should fail for non existent posts",
                "timedOut": false,
                "duration": 242,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get(`/v4/topics/${topicId}/posts/1234`)\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .set('Content-Type', 'application/json')\n  .end((err, res) => {\n    res.should.have.status(404);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.success.should.be.eql(false);\n    res.body.result.status.should.be.eql(404);\n    res.body.result.content.message.should.be.eql('Error fetching post');\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "bf9bff65-51ae-472a-ae0b-9e737ea04aa6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Get post should succeed for valid posts",
                "fullTitle": "Topcoder Message Service GET /topics/:topicId/posts/:postId Get post should succeed for valid posts",
                "timedOut": false,
                "duration": 297,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai.request(process.env['tc-message-service-url'])\n  .get(`/v4/topics/${topicId}/posts/${updPostId}`)\n  .set('Authorization', `Bearer ${process.env.USER_TOKEN}`)\n  .set('Content-Type', 'application/json')\n  .end((err, res) => {\n    res.should.have.status(200);\n    res.body.should.have.all.keys('id', 'version', 'result');\n    res.body.result.should.have.all.keys('success', 'status', 'content', 'metadata');\n    res.body.result.success.should.be.eql(true);\n    res.body.result.status.should.be.eql(200);\n    res.body.result.content.should.have.all.keys('id', 'date', 'updatedDate', 'userId', 'read', 'body', 'rawContent', 'type');\n    res.body.result.metadata.totalCount.should.be.eql(1);\n    done();\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6068c5a3-c4fa-421e-b67f-c3710022acaf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f72fd877-10ef-419d-bceb-646688479c5a",
              "2bc523fc-dc39-4cc4-83c0-ba8847cbf59e",
              "bf9bff65-51ae-472a-ae0b-9e737ea04aa6",
              "6068c5a3-c4fa-421e-b67f-c3710022acaf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 803,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}